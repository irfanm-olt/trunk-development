{"ast":null,"code":"import _regeneratorRuntime from \"/Users/optiologicdeveloper/rnProjects/userinterface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addManufactureSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadManufactureSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(deleteManufactureSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(updateManufactureSaga),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(manufactureSaga);\n\nimport * as Actions from './constants';\nimport { addManufacture, loadManufacture, deleteManufacture, updateManufacture } from './service';\n\nvar _require = require(\"@redux-saga/core/effects\"),\n    put = _require.put,\n    call = _require.call,\n    takeEvery = _require.takeEvery;\n/**\n * ADD MANUFACTURE\n */\n\n\nfunction addManufactureSaga(_ref) {\n  var manufacture, _yield$call, data;\n\n  return _regeneratorRuntime.wrap(function addManufactureSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          manufacture = _ref.manufacture;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(addManufacture, {\n            manufacture: manufacture\n          });\n\n        case 4:\n          _yield$call = _context.sent;\n          data = _yield$call.data;\n          _context.next = 8;\n          return put({\n            type: Actions.ADD_MANUFACTURE_SUCCESS,\n            payload: data\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 14;\n          return put({\n            type: Actions.ADD_MANUFACTURE_ERROR,\n            payload: _context.t0.error\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 10]]);\n}\n/**\n * LOAD MANUFACTURE\n */\n\n\nfunction loadManufactureSaga(_ref2) {\n  var query, _yield$call2, data, pager;\n\n  return _regeneratorRuntime.wrap(function loadManufactureSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          query = _ref2.query;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(loadManufacture, {\n            query: query\n          });\n\n        case 4:\n          _yield$call2 = _context2.sent;\n          data = _yield$call2.data;\n          pager = _yield$call2.pager;\n          _context2.next = 9;\n          return put({\n            type: Actions.LOAD_MANUFACTURE_SUCCESS,\n            payload: data,\n            pager: pager\n          });\n\n        case 9:\n          _context2.next = 15;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 15;\n          return put({\n            type: Actions.LOAD_MANUFACTURE_ERROR,\n            error: _context2.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 11]]);\n}\n/**\n *  DELETE MANUFACTURE\n */\n\n\nfunction deleteManufactureSaga(_ref3) {\n  var id, _yield$call3, data;\n\n  return _regeneratorRuntime.wrap(function deleteManufactureSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          id = _ref3.id;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(deleteManufacture, {\n            id: id\n          });\n\n        case 4:\n          _yield$call3 = _context3.sent;\n          data = _yield$call3.data;\n          _context3.next = 8;\n          return put({\n            type: Actions.DELETE_MANUFACTURE_SUCCESS,\n            payload: data\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 14;\n          return put({\n            type: Actions.DELETE_MANUFACTURE_ERROR,\n            error: \"Can't delete this record!\"\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 10]]);\n}\n/**\n * UPDATE MANUFACTURE\n */\n\n\nfunction updateManufactureSaga(_ref4) {\n  var datas, _yield$call4, data;\n\n  return _regeneratorRuntime.wrap(function updateManufactureSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          datas = _ref4.datas;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return call(updateManufacture, {\n            datas: datas\n          });\n\n        case 4:\n          _yield$call4 = _context4.sent;\n          data = _yield$call4.data;\n          _context4.next = 8;\n          return put({\n            type: Actions.UPDATE_MANUFACTURE_SUCCESS,\n            payload: data\n          });\n\n        case 8:\n          _context4.next = 14;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 14;\n          return put({\n            type: Actions.UPDATE_MANUFACTURE,\n            updateError: \"can't update record!\"\n          });\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 10]]);\n}\n\nexport default function manufactureSaga() {\n  return _regeneratorRuntime.wrap(function manufactureSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(Actions.ADD_MANUFACTURE, addManufactureSaga);\n\n        case 2:\n          _context5.next = 4;\n          return takeEvery(Actions.LOAD_MANUFACTURE, loadManufactureSaga);\n\n        case 4:\n          _context5.next = 6;\n          return takeEvery(Actions.DELETE_MANUFACTURE, deleteManufactureSaga);\n\n        case 6:\n          _context5.next = 8;\n          return takeEvery(Actions.UPDATE_MANUFACTURE, updateManufactureSaga);\n\n        case 8:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/optiologicdeveloper/rnProjects/userinterface/src/modules/masters/manufacture/saga.js"],"names":["addManufactureSaga","loadManufactureSaga","deleteManufactureSaga","updateManufactureSaga","manufactureSaga","Actions","addManufacture","loadManufacture","deleteManufacture","updateManufacture","require","put","call","takeEvery","manufacture","data","type","ADD_MANUFACTURE_SUCCESS","payload","ADD_MANUFACTURE_ERROR","error","query","pager","LOAD_MANUFACTURE_SUCCESS","LOAD_MANUFACTURE_ERROR","id","DELETE_MANUFACTURE_SUCCESS","DELETE_MANUFACTURE_ERROR","datas","UPDATE_MANUFACTURE_SUCCESS","UPDATE_MANUFACTURE","updateError","ADD_MANUFACTURE","LOAD_MANUFACTURE","DELETE_MANUFACTURE"],"mappings":"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","sourcesContent":["import * as Actions from './constants';\nimport { addManufacture, loadManufacture, deleteManufacture, updateManufacture } from './service';\nconst { put, call, takeEvery } = require(\"@redux-saga/core/effects\");\n\n/**\n * ADD MANUFACTURE\n */\nfunction* addManufactureSaga({ manufacture }) {\n    try {\n        const { data } = yield call(addManufacture, {\n            manufacture\n        });\n        yield put({\n            type: Actions.ADD_MANUFACTURE_SUCCESS,\n            payload: data,\n        });\n\n    } catch (error) {\n        yield put({\n            type: Actions.ADD_MANUFACTURE_ERROR,\n            payload: error.error,\n        });\n    }\n}\n\n/**\n * LOAD MANUFACTURE\n */\nfunction* loadManufactureSaga({ query }) {\n    try {\n        const { data, pager } = yield call(loadManufacture, {query});\n        yield put({\n            type: Actions.LOAD_MANUFACTURE_SUCCESS,\n            payload: data,\n            pager: pager\n        });\n    } catch (error) {\n        yield put({\n            type: Actions.LOAD_MANUFACTURE_ERROR,\n            error: error,\n        });\n    }\n}\n\n/**\n *  DELETE MANUFACTURE\n */\n\nfunction* deleteManufactureSaga({id}) {\n    try {\n        const { data } = yield call(deleteManufacture, {id});\n        yield put({\n            type: Actions.DELETE_MANUFACTURE_SUCCESS,\n            payload: data,\n        });\n    } catch (error) {\n        yield put({\n            type: Actions.DELETE_MANUFACTURE_ERROR,\n            error: \"Can't delete this record!\",\n        });\n    }\n}\n\n/**\n * UPDATE MANUFACTURE\n */\n\nfunction* updateManufactureSaga({datas}) {\n    try {\n        const { data } = yield call(updateManufacture, {datas});\n        yield put({\n            type: Actions.UPDATE_MANUFACTURE_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        yield put({\n            type: Actions.UPDATE_MANUFACTURE,\n            updateError: \"can't update record!\"\n        })\n    }\n}\n\nexport default function* manufactureSaga() {\n    yield takeEvery(Actions.ADD_MANUFACTURE, addManufactureSaga);\n    yield takeEvery(Actions.LOAD_MANUFACTURE,loadManufactureSaga );\n    yield takeEvery(Actions.DELETE_MANUFACTURE, deleteManufactureSaga);\n    yield takeEvery(Actions.UPDATE_MANUFACTURE, updateManufactureSaga);\n}\n"]},"metadata":{},"sourceType":"module"}