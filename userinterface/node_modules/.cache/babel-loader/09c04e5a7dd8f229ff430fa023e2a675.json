{"ast":null,"code":"import _regeneratorRuntime from \"/Users/optiologicdeveloper/rnProjects/userinterface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(createCustomerSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadCustomerSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(deleteCustomerSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(customerSaga);\n\nimport * as Actions from './constants';\nimport { createCustomer, loadCustomer, deleteCustomer } from './service';\n\nvar _require = require(\"@redux-saga/core/effects\"),\n    put = _require.put,\n    call = _require.call,\n    takeEvery = _require.takeEvery;\n/**\n * Create Customer saga\n */\n\n\nfunction createCustomerSaga(_ref) {\n  var companyName, contactPersonFirstname, contactPersonLastname, contactPersonMobile, contactPersonEmail, companyPhone, emirates, buildingNumber, street, address, _yield$call, data;\n\n  return _regeneratorRuntime.wrap(function createCustomerSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          companyName = _ref.companyName, contactPersonFirstname = _ref.contactPersonFirstname, contactPersonLastname = _ref.contactPersonLastname, contactPersonMobile = _ref.contactPersonMobile, contactPersonEmail = _ref.contactPersonEmail, companyPhone = _ref.companyPhone, emirates = _ref.emirates, buildingNumber = _ref.buildingNumber, street = _ref.street, address = _ref.address;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(createCustomer, {\n            companyName: companyName,\n            contactPersonFirstname: contactPersonFirstname,\n            contactPersonLastname: contactPersonLastname,\n            contactPersonMobile: contactPersonMobile,\n            contactPersonEmail: contactPersonEmail,\n            companyPhone: companyPhone,\n            emirates: emirates,\n            buildingNumber: buildingNumber,\n            street: street,\n            address: address\n          });\n\n        case 4:\n          _yield$call = _context.sent;\n          data = _yield$call.data;\n          _context.next = 8;\n          return put({\n            type: Actions.CREATE_CUSTOMER_SUCCESS,\n            payload: data\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 14;\n          return put({\n            type: Actions.CREATE_CUSTOMER_ERROR,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 10]]);\n}\n/**\n * Load customer\n */\n\n\nfunction loadCustomerSaga(_ref2) {\n  var query, _yield$call2, data, pager;\n\n  return _regeneratorRuntime.wrap(function loadCustomerSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          query = _ref2.query;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(loadCustomer, {\n            query: query\n          });\n\n        case 4:\n          _yield$call2 = _context2.sent;\n          data = _yield$call2.data;\n          pager = _yield$call2.pager;\n          _context2.next = 9;\n          return put({\n            type: Actions.LOAD_CUSTOMER_SUCCESS,\n            payload: data,\n            pager: pager\n          });\n\n        case 9:\n          _context2.next = 15;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 15;\n          return put({\n            type: Actions.LOAD_CUSTOMER_ERROR,\n            error: _context2.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 11]]);\n}\n/**\n *  DELETE CUSTOMER\n */\n\n\nfunction deleteCustomerSaga(_ref3) {\n  var id, _yield$call3, data;\n\n  return _regeneratorRuntime.wrap(function deleteCustomerSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          id = _ref3.id;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(deleteCustomer, {\n            id: id\n          });\n\n        case 4:\n          _yield$call3 = _context3.sent;\n          data = _yield$call3.data;\n          _context3.next = 8;\n          return put({\n            type: Actions.DELETE_CUSTOMER_SUCCESS,\n            payload: data\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 14;\n          return put({\n            type: Actions.DELETE_CUSTOMER_ERROR,\n            error: \"Can't delete this record!\"\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 10]]);\n}\n\nexport default function customerSaga() {\n  return _regeneratorRuntime.wrap(function customerSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(Actions.CREATE_CUSTOMER, createCustomerSaga);\n\n        case 2:\n          _context4.next = 4;\n          return takeEvery(Actions.LOAD_CUSTOMER, loadCustomerSaga);\n\n        case 4:\n          _context4.next = 6;\n          return takeEvery(Actions.DELETE_CUSTOMER, deleteCustomerSaga);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/optiologicdeveloper/rnProjects/userinterface/src/modules/customer/saga.js"],"names":["createCustomerSaga","loadCustomerSaga","deleteCustomerSaga","customerSaga","Actions","createCustomer","loadCustomer","deleteCustomer","require","put","call","takeEvery","companyName","contactPersonFirstname","contactPersonLastname","contactPersonMobile","contactPersonEmail","companyPhone","emirates","buildingNumber","street","address","data","type","CREATE_CUSTOMER_SUCCESS","payload","CREATE_CUSTOMER_ERROR","error","query","pager","LOAD_CUSTOMER_SUCCESS","LOAD_CUSTOMER_ERROR","id","DELETE_CUSTOMER_SUCCESS","DELETE_CUSTOMER_ERROR","CREATE_CUSTOMER","LOAD_CUSTOMER","DELETE_CUSTOMER"],"mappings":"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","sourcesContent":["import * as Actions from './constants';\nimport { \n    createCustomer, \n    loadCustomer,\n    deleteCustomer\n } from './service';\nconst { put, call, takeEvery } = require(\"@redux-saga/core/effects\");\n/**\n * Create Customer saga\n */\nfunction* createCustomerSaga({ \n    companyName, \n    contactPersonFirstname, \n    contactPersonLastname, \n    contactPersonMobile, \n    contactPersonEmail, \n    companyPhone, \n    emirates, \n    buildingNumber, \n    street, \n    address }) {\n    try {\n        const {data} = yield call(createCustomer, {\n            companyName,\n            contactPersonFirstname,\n            contactPersonLastname,\n            contactPersonMobile,\n            contactPersonEmail,\n            companyPhone,\n            emirates,\n            buildingNumber,\n            street,\n            address\n        });\n        yield put({\n            type: Actions.CREATE_CUSTOMER_SUCCESS,\n            payload: data,\n        });\n\n    } catch (error) {\n        yield put({\n            type: Actions.CREATE_CUSTOMER_ERROR,\n            error: error,\n        });\n    }\n}\n\n\n/**\n * Load customer\n */\nfunction* loadCustomerSaga({ query }) {\n    try {\n        const { data, pager } = yield call(loadCustomer, { query });\n        yield put({\n            type: Actions.LOAD_CUSTOMER_SUCCESS,\n            payload: data,\n            pager: pager\n        });\n    } catch (error) {\n        yield put({\n            type: Actions.LOAD_CUSTOMER_ERROR,\n            error: error,\n        });\n    }\n}\n\n/**\n *  DELETE CUSTOMER\n */\n\n function* deleteCustomerSaga({id}) {\n    try {\n        const { data } = yield call(deleteCustomer, {id});\n        yield put({\n            type: Actions.DELETE_CUSTOMER_SUCCESS,\n            payload: data,\n        });\n    } catch (error) {\n        yield put({\n            type: Actions.DELETE_CUSTOMER_ERROR,\n            error: \"Can't delete this record!\",\n        });\n    }\n}\n\nexport default function* customerSaga() {\n    yield takeEvery(Actions.CREATE_CUSTOMER, createCustomerSaga);\n    yield takeEvery(Actions.LOAD_CUSTOMER, loadCustomerSaga);\n    yield takeEvery(Actions.DELETE_CUSTOMER, deleteCustomerSaga);\n}\n"]},"metadata":{},"sourceType":"module"}