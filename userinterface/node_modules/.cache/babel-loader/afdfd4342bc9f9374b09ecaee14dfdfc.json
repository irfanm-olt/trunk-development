{"ast":null,"code":"import _regeneratorRuntime from \"/Users/optiologicdeveloper/rnProjects/userinterface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addCarSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadCarSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(deleteCarSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(updateCarSaga),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(carSaga);\n\nimport * as Actions from './constants';\nimport { addCar, loadCar, fetchManufactures, deleteCar, updateCar } from './service';\n\nvar _require = require(\"@redux-saga/core/effects\"),\n    put = _require.put,\n    call = _require.call,\n    takeEvery = _require.takeEvery,\n    all = _require.all;\n/**\n * ADD CAR\n */\n\n\nfunction addCarSaga(_ref) {\n  var manufacture, carName, _yield$call, data;\n\n  return _regeneratorRuntime.wrap(function addCarSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          manufacture = _ref.manufacture, carName = _ref.carName;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(addCar, {\n            manufacture: manufacture,\n            carName: carName\n          });\n\n        case 4:\n          _yield$call = _context.sent;\n          data = _yield$call.data;\n          _context.next = 8;\n          return put({\n            type: Actions.ADD_CAR_SUCCESS,\n            payload: data\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 14;\n          return put({\n            type: Actions.ADD_CAR_ERROR,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 10]]);\n}\n/**\n * LOAD CAR\n */\n\n\nfunction loadCarSaga(_ref2) {\n  var query, _yield$all, car, manufacture;\n\n  return _regeneratorRuntime.wrap(function loadCarSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          query = _ref2.query;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return all({\n            car: call(loadCar, {\n              query: query\n            }),\n            manufacture: call(fetchManufactures)\n          });\n\n        case 4:\n          _yield$all = _context2.sent;\n          car = _yield$all.car;\n          manufacture = _yield$all.manufacture;\n          _context2.next = 9;\n          return put({\n            type: Actions.LOAD_CAR_SUCCESS,\n            carName: car.data,\n            manufacture: manufacture.data,\n            pager: car.pager\n          });\n\n        case 9:\n          _context2.next = 15;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 15;\n          return put({\n            type: Actions.LOAD_CAR_ERROR,\n            error: _context2.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 11]]);\n}\n/**\n *  DELETE CAR\n */\n\n\nfunction deleteCarSaga(_ref3) {\n  var id, _yield$call2, data;\n\n  return _regeneratorRuntime.wrap(function deleteCarSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          id = _ref3.id;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(deleteCar, {\n            id: id\n          });\n\n        case 4:\n          _yield$call2 = _context3.sent;\n          data = _yield$call2.data;\n          _context3.next = 8;\n          return put({\n            type: Actions.DELETE_CAR_SUCCESS,\n            payload: data\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 14;\n          return put({\n            type: Actions.DELETE_CAR_ERROR,\n            error: \"Can't delete this record!\"\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 10]]);\n}\n/**\n * UPDATE CAR\n */\n\n\nfunction updateCarSaga(_ref4) {\n  var datas, _yield$call3, data;\n\n  return _regeneratorRuntime.wrap(function updateCarSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          datas = _ref4.datas;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return call(updateCar, {\n            datas: datas\n          });\n\n        case 4:\n          _yield$call3 = _context4.sent;\n          data = _yield$call3.data;\n          _context4.next = 8;\n          return put({\n            type: Actions.UPDATE_CAR_SUCCESS,\n            payload: data\n          });\n\n        case 8:\n          _context4.next = 14;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 14;\n          return put({\n            type: Actions.UPDATE_CAR_ERROR,\n            updateError: \"can't update record!\"\n          });\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 10]]);\n}\n\nexport default function carSaga() {\n  return _regeneratorRuntime.wrap(function carSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(Actions.ADD_CAR, addCarSaga);\n\n        case 2:\n          _context5.next = 4;\n          return takeEvery(Actions.LOAD_CAR, loadCarSaga);\n\n        case 4:\n          _context5.next = 6;\n          return takeEvery(Actions.DELETE_CAR, deleteCarSaga);\n\n        case 6:\n          _context5.next = 8;\n          return takeEvery(Actions.UPDATE_CAR, updateCarSaga);\n\n        case 8:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/optiologicdeveloper/rnProjects/userinterface/src/modules/masters/car/saga.js"],"names":["addCarSaga","loadCarSaga","deleteCarSaga","updateCarSaga","carSaga","Actions","addCar","loadCar","fetchManufactures","deleteCar","updateCar","require","put","call","takeEvery","all","manufacture","carName","data","type","ADD_CAR_SUCCESS","payload","ADD_CAR_ERROR","error","query","car","LOAD_CAR_SUCCESS","pager","LOAD_CAR_ERROR","id","DELETE_CAR_SUCCESS","DELETE_CAR_ERROR","datas","UPDATE_CAR_SUCCESS","UPDATE_CAR_ERROR","updateError","ADD_CAR","LOAD_CAR","DELETE_CAR","UPDATE_CAR"],"mappings":"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","sourcesContent":["import * as Actions from './constants';\nimport { \n    addCar, \n    loadCar, \n    fetchManufactures,\n    deleteCar,\n    updateCar\n} from './service';\nconst { put, call, takeEvery, all } = require(\"@redux-saga/core/effects\");\n\n/**\n * ADD CAR\n */\nfunction* addCarSaga({ manufacture, carName }) {\n    try {\n        const { data } = yield call(addCar, {\n            manufacture,\n            carName\n        });\n        yield put({\n            type: Actions.ADD_CAR_SUCCESS,\n            payload: data,\n        });\n\n    } catch (error) {\n        yield put({\n            type: Actions.ADD_CAR_ERROR,\n            error: error,\n        });\n    }\n}\n\n/**\n * LOAD CAR\n */\nfunction* loadCarSaga({query}) {\n    try {\n        const { car, manufacture } = yield all({\n            car: call(loadCar, {query}),\n            manufacture: call(fetchManufactures)\n        });\n        yield put({\n            type: Actions.LOAD_CAR_SUCCESS,\n            carName: car.data,\n            manufacture: manufacture.data,\n            pager: car.pager\n        });\n    } catch (error) {\n        yield put({\n            type: Actions.LOAD_CAR_ERROR,\n            error: error,\n        });\n    }\n}\n\n\n/**\n *  DELETE CAR\n */\n\n function* deleteCarSaga({id}) {\n    try {\n        const { data } = yield call(deleteCar, {id});\n        yield put({\n            type: Actions.DELETE_CAR_SUCCESS,\n            payload: data,\n        });\n    } catch (error) {\n        yield put({\n            type: Actions.DELETE_CAR_ERROR,\n            error: \"Can't delete this record!\",\n        });\n    }\n}\n\n/**\n * UPDATE CAR\n */\n\nfunction* updateCarSaga({datas}) {\n    try {\n        const { data } = yield call(updateCar, {datas});\n        yield put({\n            type: Actions.UPDATE_CAR_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        yield put({\n            type: Actions.UPDATE_CAR_ERROR,\n            updateError: \"can't update record!\"\n        })\n    }\n}\n\nexport default function* carSaga() {\n    yield takeEvery(Actions.ADD_CAR, addCarSaga);\n    yield takeEvery(Actions.LOAD_CAR,loadCarSaga);\n    yield takeEvery(Actions.DELETE_CAR, deleteCarSaga);\n    yield takeEvery(Actions.UPDATE_CAR, updateCarSaga);\n}\n"]},"metadata":{},"sourceType":"module"}