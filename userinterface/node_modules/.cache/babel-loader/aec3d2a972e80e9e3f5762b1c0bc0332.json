{"ast":null,"code":"import _regeneratorRuntime from \"/Users/optiologicdeveloper/rnProjects/userinterface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPartSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadPartSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(deletePartSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(updatePartSaga),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(partSaga);\n\nimport * as Actions from './constants';\nimport { addPart, loadPart, fetchPartSection, deletePart, updatePart } from './service';\n\nvar _require = require(\"@redux-saga/core/effects\"),\n    put = _require.put,\n    call = _require.call,\n    takeEvery = _require.takeEvery,\n    all = _require.all;\n/**\n * Add car master saga\n */\n\n\nfunction addPartSaga(_ref) {\n  var partSection, partName, _yield$call, data;\n\n  return _regeneratorRuntime.wrap(function addPartSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          partSection = _ref.partSection, partName = _ref.partName;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(addPart, {\n            partSection: partSection,\n            partName: partName\n          });\n\n        case 4:\n          _yield$call = _context.sent;\n          data = _yield$call.data;\n          _context.next = 8;\n          return put({\n            type: Actions.ADD_PART_SUCCESS,\n            payload: data\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 14;\n          return put({\n            type: Actions.ADD_PART_ERROR,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 10]]);\n}\n/**\n * Load car master\n */\n\n\nfunction loadPartSaga(_ref2) {\n  var query, _yield$all, partName, partSection;\n\n  return _regeneratorRuntime.wrap(function loadPartSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          query = _ref2.query;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return all({\n            partName: call(loadPart, {\n              query: query\n            }),\n            partSection: call(fetchPartSection)\n          });\n\n        case 4:\n          _yield$all = _context2.sent;\n          partName = _yield$all.partName;\n          partSection = _yield$all.partSection;\n          _context2.next = 9;\n          return put({\n            type: Actions.LOAD_PART_SUCCESS,\n            partName: partName.data,\n            partSection: partSection.data,\n            pager: partName.pager\n          });\n\n        case 9:\n          _context2.next = 15;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 15;\n          return put({\n            type: Actions.LOAD_PART_ERROR,\n            error: _context2.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 11]]);\n}\n/**\n *  DELETE PART\n */\n\n\nfunction deletePartSaga(_ref3) {\n  var id, _yield$call2, data;\n\n  return _regeneratorRuntime.wrap(function deletePartSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          id = _ref3.id;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(deletePart, {\n            id: id\n          });\n\n        case 4:\n          _yield$call2 = _context3.sent;\n          data = _yield$call2.data;\n          _context3.next = 8;\n          return put({\n            type: Actions.DELETE_PART_SUCCESS,\n            payload: data\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 14;\n          return put({\n            type: Actions.DELETE_PART_ERROR,\n            error: \"Can't delete this record!\"\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 10]]);\n}\n/**\n * UPDATE CAR\n */\n\n\nfunction updatePartSaga(_ref4) {\n  var datas, _yield$call3, data;\n\n  return _regeneratorRuntime.wrap(function updatePartSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          datas = _ref4.datas;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return call(updatePart, {\n            datas: datas\n          });\n\n        case 4:\n          _yield$call3 = _context4.sent;\n          data = _yield$call3.data;\n          _context4.next = 8;\n          return put({\n            type: Actions.UPDATE_PART_SUCCESS,\n            payload: data\n          });\n\n        case 8:\n          _context4.next = 14;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 14;\n          return put({\n            type: Actions.UPDATE_PART_ERROR,\n            updateError: \"can't update record!\"\n          });\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 10]]);\n}\n\nexport default function partSaga() {\n  return _regeneratorRuntime.wrap(function partSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(Actions.ADD_PART, addPartSaga);\n\n        case 2:\n          _context5.next = 4;\n          return takeEvery(Actions.LOAD_PART, loadPartSaga);\n\n        case 4:\n          _context5.next = 6;\n          return takeEvery(Actions.DELETE_PART, deletePartSaga);\n\n        case 6:\n          _context5.next = 8;\n          return takeEvery(Actions.UPDATE_PART, updatePartSaga);\n\n        case 8:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/optiologicdeveloper/rnProjects/userinterface/src/modules/masters/part/saga.js"],"names":["addPartSaga","loadPartSaga","deletePartSaga","updatePartSaga","partSaga","Actions","addPart","loadPart","fetchPartSection","deletePart","updatePart","require","put","call","takeEvery","all","partSection","partName","data","type","ADD_PART_SUCCESS","payload","ADD_PART_ERROR","error","query","LOAD_PART_SUCCESS","pager","LOAD_PART_ERROR","id","DELETE_PART_SUCCESS","DELETE_PART_ERROR","datas","UPDATE_PART_SUCCESS","UPDATE_PART_ERROR","updateError","ADD_PART","LOAD_PART","DELETE_PART","UPDATE_PART"],"mappings":"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","sourcesContent":["import * as Actions from './constants';\nimport { \n    addPart, \n    loadPart, \n    fetchPartSection,\n    deletePart,\n    updatePart\n} from './service';\nconst { put, call, takeEvery, all } = require(\"@redux-saga/core/effects\");\n\n/**\n * Add car master saga\n */\nfunction* addPartSaga({ partSection, partName }) {\n    try {\n        const { data } = yield call(addPart, {\n            partSection,\n            partName\n        });\n        yield put({\n            type: Actions.ADD_PART_SUCCESS,\n            payload: data,\n        });\n\n    } catch (error) {\n        yield put({\n            type: Actions.ADD_PART_ERROR,\n            error: error,\n        });\n    }\n}\n\n/**\n * Load car master\n */\nfunction* loadPartSaga({ query }) {\n    try {\n        const { partName, partSection } = yield all({\n            partName: call(loadPart, { query }),\n            partSection: call(fetchPartSection)\n        });\n        yield put({\n            type: Actions.LOAD_PART_SUCCESS,\n            partName: partName.data,\n            partSection: partSection.data,\n            pager: partName.pager\n        });\n    } catch (error) {\n        yield put({\n            type: Actions.LOAD_PART_ERROR,\n            error: error,\n        });\n    }\n}\n\n/**\n *  DELETE PART\n */\n\n function* deletePartSaga({id}) {\n    try {\n        const { data } = yield call(deletePart, {id});\n        yield put({\n            type: Actions.DELETE_PART_SUCCESS,\n            payload: data,\n        });\n    } catch (error) {\n        yield put({\n            type: Actions.DELETE_PART_ERROR,\n            error: \"Can't delete this record!\",\n        });\n    }\n}\n\n/**\n * UPDATE CAR\n */\n\nfunction* updatePartSaga({datas}) {\n    try {\n        const { data } = yield call(updatePart, {datas});\n        yield put({\n            type: Actions.UPDATE_PART_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        yield put({\n            type: Actions.UPDATE_PART_ERROR,\n            updateError: \"can't update record!\"\n        })\n    }\n}\n\nexport default function* partSaga() {\n    yield takeEvery(Actions.ADD_PART, addPartSaga);\n    yield takeEvery(Actions.LOAD_PART,loadPartSaga);\n    yield takeEvery(Actions.DELETE_PART, deletePartSaga);\n    yield takeEvery(Actions.UPDATE_PART, updatePartSaga);\n}\n"]},"metadata":{},"sourceType":"module"}