{"ast":null,"code":"import _objectDestructuringEmpty from \"/Users/optiologicdeveloper/rnProjects/userinterface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nimport _regeneratorRuntime from \"/Users/optiologicdeveloper/rnProjects/userinterface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(doLoginSuccess),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(signInWithEmailSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(signOutSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(authSaga);\n\nimport * as Actions from './constants';\nimport { put, call, takeEvery } from 'redux-saga/effects';\nimport globalConfig from '../../utils/global';\nimport { emailLogin } from './srevice';\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"../../utils/setAuthToken\";\n/**\n * Do login success\n * @param token\n * @param user\n * @returns {IterableIterator<*>}\n */\n\nfunction doLoginSuccess(token) {\n  var method,\n      decoded,\n      _args = arguments;\n  return _regeneratorRuntime.wrap(function doLoginSuccess$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          method = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'email';\n          decoded = jwt_decode(token);\n          _context.next = 4;\n          return put({\n            type: Actions.SET_CURRENT_USER,\n            payload: {\n              decoded: decoded\n            }\n          });\n\n        case 4:\n          setAuthToken(token);\n          globalConfig.setToken(token);\n          localStorage.setItem(\"jwtToken\", token);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n/**\n * Sign In saga\n * @param username\n * @param password\n * @returns {IterableIterator<*>}\n */\n\n\nfunction signInWithEmailSaga(_ref) {\n  var email, password, _yield$call, token;\n\n  return _regeneratorRuntime.wrap(function signInWithEmailSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          email = _ref.email, password = _ref.password;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(emailLogin, {\n            email: email,\n            password: password\n          });\n\n        case 4:\n          _yield$call = _context2.sent;\n          token = _yield$call.token;\n          _context2.next = 8;\n          return call(doLoginSuccess, token, 'email');\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 14;\n          return put({\n            type: Actions.GET_LOGIN_ERRORS,\n            payload: _context2.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 10]]);\n}\n\nfunction signOutSaga(_ref2) {\n  return _regeneratorRuntime.wrap(function signOutSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _objectDestructuringEmpty(_ref2);\n\n          _context3.prev = 1;\n          localStorage.removeItem(\"jwtToken\");\n          setAuthToken(false);\n          _context3.next = 6;\n          return put({\n            type: Actions.SET_CURRENT_USER,\n            payload: {}\n          });\n\n        case 6:\n          _context3.next = 10;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](1);\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 8]]);\n}\n\nexport default function authSaga() {\n  return _regeneratorRuntime.wrap(function authSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(Actions.SIGN_IN_WITH_EMAIL, signInWithEmailSaga);\n\n        case 2:\n          _context4.next = 4;\n          return takeEvery(Actions.SIGN_OUT, signOutSaga);\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/optiologicdeveloper/rnProjects/userinterface/src/modules/auth/saga.js"],"names":["doLoginSuccess","signInWithEmailSaga","signOutSaga","authSaga","Actions","put","call","takeEvery","globalConfig","emailLogin","jwt_decode","setAuthToken","token","method","decoded","type","SET_CURRENT_USER","payload","setToken","localStorage","setItem","email","password","GET_LOGIN_ERRORS","removeItem","SIGN_IN_WITH_EMAIL","SIGN_OUT"],"mappings":";;;oDAeWA,c;qDAiBDC,mB;qDAeAC,W;qDAaeC,Q;;AA5DzB,OAAO,KAAKC,OAAZ,MAAyB,aAAzB;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,SAAnB,QAAmC,oBAAnC;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,SACEC,UADF,QAEO,WAFP;AAGA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACC,SAAUX,cAAV,CAAyBY,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgCC,UAAAA,MAAhC,2DAAyC,OAAzC;AACSC,UAAAA,OADT,GACmBJ,UAAU,CAACE,KAAD,CAD7B;AAAA;AAEG,iBAAMP,GAAG,CAAC;AACNU,YAAAA,IAAI,EAAEX,OAAO,CAACY,gBADR;AAENC,YAAAA,OAAO,EAAE;AAACH,cAAAA,OAAO,EAAPA;AAAD;AAFH,WAAD,CAAT;;AAFH;AAMGH,UAAAA,YAAY,CAACC,KAAD,CAAZ;AACAJ,UAAAA,YAAY,CAACU,QAAb,CAAsBN,KAAtB;AACAO,UAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCR,KAAjC;;AARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAUX,mBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA+BoB,UAAAA,KAA/B,QAA+BA,KAA/B,EAAsCC,QAAtC,QAAsCA,QAAtC;AAAA;AAAA;AAEsB,iBAAMhB,IAAI,CAACG,UAAD,EAAa;AACrCY,YAAAA,KAAK,EAALA,KADqC;AAErCC,YAAAA,QAAQ,EAARA;AAFqC,WAAb,CAAV;;AAFtB;AAAA;AAEaV,UAAAA,KAFb,eAEaA,KAFb;AAAA;AAMK,iBAAMN,IAAI,CAACN,cAAD,EAAiBY,KAAjB,EAAwB,OAAxB,CAAV;;AANL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQM,iBAAMP,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEX,OAAO,CAACmB,gBADN;AAERN,YAAAA,OAAO;AAFC,WAAD,CAAT;;AARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUf,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAEIiB,UAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB;AACAb,UAAAA,YAAY,CAAC,KAAD,CAAZ;AAHJ;AAII,iBAAMN,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEX,OAAO,CAACY,gBADN;AAERC,YAAAA,OAAO,EAAE;AAFD,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,eAAe,SAAUd,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMI,SAAS,CAACH,OAAO,CAACqB,kBAAT,EAA6BxB,mBAA7B,CAAf;;AADW;AAAA;AAEX,iBAAMM,SAAS,CAACH,OAAO,CAACsB,QAAT,EAAmBxB,WAAnB,CAAf;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as Actions from './constants';\nimport {put, call, takeEvery} from 'redux-saga/effects';\nimport globalConfig from '../../utils/global';\nimport {\n  emailLogin,\n} from './srevice';\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"../../utils/setAuthToken\";\n\n/**\n * Do login success\n * @param token\n * @param user\n * @returns {IterableIterator<*>}\n */\n function* doLoginSuccess(token, method = 'email') {\n    const decoded = jwt_decode(token);\n    yield put({\n        type: Actions.SET_CURRENT_USER,\n        payload: {decoded},\n    });\n    setAuthToken(token);\n    globalConfig.setToken(token);\n    localStorage.setItem(\"jwtToken\", token);\n}\n\n/**\n * Sign In saga\n * @param username\n * @param password\n * @returns {IterableIterator<*>}\n */\nfunction* signInWithEmailSaga({email, password}) {\n    try {\n      const {token} = yield call(emailLogin, {\n        email,\n        password,\n      });\n     yield call(doLoginSuccess, token, 'email');\n    } catch (error) {\n      yield put({\n        type: Actions.GET_LOGIN_ERRORS,\n        payload: error,\n    });\n    }\n}\n\nfunction* signOutSaga({}) {\n  try {\n    localStorage.removeItem(\"jwtToken\");\n    setAuthToken(false);\n    yield put({\n      type: Actions.SET_CURRENT_USER,\n      payload: {},\n  });\n  } catch (e) {\n    // yield call(handleError, e);\n  }\n}\n\nexport default function* authSaga() {\n    yield takeEvery(Actions.SIGN_IN_WITH_EMAIL, signInWithEmailSaga);\n    yield takeEvery(Actions.SIGN_OUT, signOutSaga);\n}"]},"metadata":{},"sourceType":"module"}